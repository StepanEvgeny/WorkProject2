import sqlite3
from telegram import Update, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from pydub import AudioSegment
import wave
import os
from vosk import Model, KaldiRecognizer

# === –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏) ===
FAQ = {
    "faq1": {
        "question": "–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        "answer": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    },
    "faq2": {
        "question": "—Å—Ç–∞—Ç—É—Å –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞",
        "answer": "–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'. –¢–∞–º —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å."
    },
    "faq3": {
        "question": "–∫–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
        "answer": "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ ‚Äî –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏."
    },
    "faq4": {
        "question": "—Ç–æ–≤–∞—Ä –ø—Ä–∏—à–µ–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º",
        "answer": "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –ú—ã –ø–æ–º–æ–∂–µ–º —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∏–ª–∏ –æ–±–º–µ–Ω–æ–º."
    },
    "faq5": {
        "question": "–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        "answer": "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç-–±–æ—Ç."
    },
    "faq6": {
        "question": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ",
        "answer": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    }
}

ADMIN_ID = 1234567  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram user ID

def init_db():
    conn = sqlite3.connect("messages.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            message TEXT
        )
    """)
    conn.commit()
    conn.close()

def save_message(user_id, username, message):
    conn = sqlite3.connect("messages.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (user_id, username, message) VALUES (?, ?, ?)",
                   (user_id, username, message))
    conn.commit()
    conn.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_msg = update.message.text.lower()
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "anonymous"

    save_message(user_id, username, user_msg)

    for item in FAQ.values():
        if item["question"] in user_msg:
            await update.message.reply_text(item["answer"])
            return

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    if user_id != ADMIN_ID:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùó –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username}:\n{user_msg}"
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
        reply_markup=ForceReply(selective=True),
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äì –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/messages ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/faq ‚Äì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    )

async def messages_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    conn = sqlite3.connect("messages.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username, message FROM messages ORDER BY id DESC LIMIT 5")
    rows = cursor.fetchall()
    conn.close()

    response = "\n\n".join([f"@{row[0]}: {row[1]}" for row in rows])
    await update.message.reply_text(response or "–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")

async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(text=data["question"].capitalize(), callback_data=key)]
        for key, data in FAQ.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)

async def faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data

    if key == "back_to_faq":
        keyboard = [
            [InlineKeyboardButton(text=data["question"].capitalize(), callback_data=k)]
            for k, data in FAQ.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)
        return

    faq_item = FAQ.get(key)
    if faq_item:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫", callback_data="back_to_faq")]]
        await query.edit_message_text(
            f"üßæ *{faq_item['question'].capitalize()}*\n\n{faq_item['answer']}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await context.bot.get_file(update.message.voice.file_id)
    await file.download_to_drive("voice.ogg")

    ogg = AudioSegment.from_file("voice.ogg")
    ogg.export("voice.wav", format="wav")

    wf = wave.open("voice.wav", "rb")
    model = Model("model")
    rec = KaldiRecognizer(model, wf.getframerate())

    text = ""
    while True:
        data = wf.readframes(4000)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            result = eval(rec.Result())
            text += result.get("text", "") + " "

    os.remove("voice.ogg")
    os.remove("voice.wav")

    update.message.text = text.strip()
    await handle_message(update, context)

def main():
    init_db()
    app = Application.builder().token("Token_Bot").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("messages", messages_command))
    app.add_handler(CommandHandler("faq", faq_command))
    app.add_handler(CallbackQueryHandler(faq_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
